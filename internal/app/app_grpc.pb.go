// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: internal/proto/app.proto

package app

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ICache_Get_FullMethodName = "/ICache/Get"
	ICache_Set_FullMethodName = "/ICache/Set"
	ICache_Del_FullMethodName = "/ICache/Del"
)

// ICacheClient is the e2e API for ICache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ICacheClient interface {
	Get(ctx context.Context, in *GetCommand, opts ...grpc.CallOption) (*GetResult, error)
	Set(ctx context.Context, in *SetCommand, opts ...grpc.CallOption) (*SetResult, error)
	Del(ctx context.Context, in *DelCommand, opts ...grpc.CallOption) (*DelResult, error)
}

type iCacheClient struct {
	cc grpc.ClientConnInterface
}

func NewICacheClient(cc grpc.ClientConnInterface) ICacheClient {
	return &iCacheClient{cc}
}

func (c *iCacheClient) Get(ctx context.Context, in *GetCommand, opts ...grpc.CallOption) (*GetResult, error) {
	out := new(GetResult)
	err := c.cc.Invoke(ctx, ICache_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iCacheClient) Set(ctx context.Context, in *SetCommand, opts ...grpc.CallOption) (*SetResult, error) {
	out := new(SetResult)
	err := c.cc.Invoke(ctx, ICache_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iCacheClient) Del(ctx context.Context, in *DelCommand, opts ...grpc.CallOption) (*DelResult, error) {
	out := new(DelResult)
	err := c.cc.Invoke(ctx, ICache_Del_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ICacheServer is the server API for ICache service.
// All implementations must embed UnimplementedICacheServer
// for forward compatibility
type ICacheServer interface {
	Get(context.Context, *GetCommand) (*GetResult, error)
	Set(context.Context, *SetCommand) (*SetResult, error)
	Del(context.Context, *DelCommand) (*DelResult, error)
	mustEmbedUnimplementedICacheServer()
}

// UnimplementedICacheServer must be embedded to have forward compatible implementations.
type UnimplementedICacheServer struct {
}

func (UnimplementedICacheServer) Get(context.Context, *GetCommand) (*GetResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedICacheServer) Set(context.Context, *SetCommand) (*SetResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedICacheServer) Del(context.Context, *DelCommand) (*DelResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (UnimplementedICacheServer) mustEmbedUnimplementedICacheServer() {}

// UnsafeICacheServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ICacheServer will
// result in compilation errors.
type UnsafeICacheServer interface {
	mustEmbedUnimplementedICacheServer()
}

func RegisterICacheServer(s grpc.ServiceRegistrar, srv ICacheServer) {
	s.RegisterService(&ICache_ServiceDesc, srv)
}

func _ICache_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICacheServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ICache_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICacheServer).Get(ctx, req.(*GetCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _ICache_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICacheServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ICache_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICacheServer).Set(ctx, req.(*SetCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _ICache_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICacheServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ICache_Del_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICacheServer).Del(ctx, req.(*DelCommand))
	}
	return interceptor(ctx, in, info, handler)
}

// ICache_ServiceDesc is the grpc.ServiceDesc for ICache service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ICache_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ICache",
	HandlerType: (*ICacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ICache_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _ICache_Set_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _ICache_Del_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/app.proto",
}
